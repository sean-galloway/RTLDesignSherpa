@startuml DaddaTree

class DaddaTree {
  - module_str: str
  - param_str: str
  - port_str: str
  - buswidth: int
  + __init__(buswidth: int)
  + generate_dadda_numbers(n: int) : List[int]
  + next_smaller_dadda_number(dadda_numbers: List[int], n: int) : int
  + dadda_reduction(bit_groups: Dict[int, List[str]], N: int) : Dict[int, List[str]]
  + verilog(file_path: str)
}

class Module {
  - start_instructions: list
  - instructions: list
  - end_instructions: list
  - module_name: str
  - instance_name: str
  - params: Param
  - ports: Signal
  - wires: list

  + __init__(module_name: str = '', instance_name: str = '')
  + add_port_string(ports: str): void
  + wire(name: str, _type: str): void
  + start(): void
  + end(): void
  + stmt_assign(lhs: str, rhs: str): void
  + instruction(instruction: str): void
  + comment(c: str): void
  + write(file_path: str, filename: str): void
  + instantiate(instance_name: str, inputs: list, outputs: list): str
  + __str__(): str
  + in_connector(port: str, connector: str): dict
  + out_connector(port: str, connector: str): dict
}

class MultiplierMixin {
  + partial_products(N: int): Dict[int, List[str]]
  + partial_products_booth_radix_4(N: int): Dict[int, List[str]]
  + generate_final_addition(bit_groups: Dict[int, List[str]], N: int)
  + generate_final_assignments(N: int)
}

DaddaTree --|> Module
DaddaTree --|> MultiplierMixin

@enduml
