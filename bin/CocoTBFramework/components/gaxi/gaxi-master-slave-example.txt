

@cocotb.test(timeout_time=2, timeout_unit="ms")
async def gaxi_master_slave_test(dut):
    """Main test entry point"""
    tb = GaxiMasterSlaveExample(dut)
    
    # Use a fixed seed for reproducibility
    random.seed(42)
    
    # Start the clock
    await tb.start_clock('clk', 10, 'ns')
    
    # Run the test
    await tb.run_test()
    
    # Final stability
    await tb.wait_clocks('clk', 50)
    
    tb.log.info("Test completed successfully")
    
    # Print test summary
    print("GAXI Master-Slave Communication test completed successfully!")
    print(f"Processed {tb.scoreboard.transaction_count} transactions")
    print(f"Scoreboard errors: {tb.scoreboard.error_count}")


if __name__ == "__main__":
    # This section is for running the test directly (development mode)
    import sys
    from cocotb_test.simulator import run
    import os
    
    # Get the directory of this file
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Build the test arguments
    args = [
        "--top=gaxi_loopback",  # Replace with your RTL top module
        f"--sim-build={current_dir}/sim_build",
        "--wave=waves.vcd",
    ]
    
    # Run the test
    sys.exit(run(
        verilog_sources=["./rtl/gaxi_loopback.sv"],  # Replace with your RTL files
        toplevel="gaxi_loopback",  # Replace with your RTL top module
        module="gaxi_master_slave_example",  # This file's module name
        simulator="icarus",  # or "verilator", "questa", etc.
        args=args
    ))
"""Example of GAXI Master-Slave Communication"""
import random
import cocotb
from cocotb.triggers import RisingEdge, Timer

from CocoTBFramework.Componentsmemory_model import MemoryModel
from CocoTBFramework.Componentsgaxi_packet import GAXIPacket
from CocoTBFramework.Componentsgaxi_components import GAXIMaster, GAXISlave, GAXIMonitor
from Scoreboards.gaxi_scoreboard import GAXIScoreboard, GAXItoMemoryAdapter
from Enhancements.gaxi_enhancements import EnhancedGAXIMaster, EnhancedGAXISlave
from CocoTBFramework.TBClasses.tbbase import TBBase


class GaxiMasterSlaveExample(TBBase):
    """Example testbench for GAXI Master-Slave communication"""
    
    def __init__(self, dut, clk=None, rstn=None):
        super().__init__(dut)
        
        # Clock and reset
        self.clk = clk or dut.clk
        self.rstn = rstn or dut.rstn
        
        # Memory model setup
        self.addr_width = 32
        self.data_width = 32
        self.mem = MemoryModel(
            num_lines=1024,
            bytes_per_line=self.data_width // 8,
            log=self.log
        )
        
        # Create field config
        self.field_config = {
            'cmd': {
                'bits': 1,
                'default': 0,
                'format': 'bin',
                'display_width': 1,
                'active_bits': (0, 0),
                'description': 'Command (0=Read, 1=Write)'
            },
            'addr': {
                'bits': self.addr_width,
                'default': 0,
                'format': 'hex',
                'display_width': 8,
                'active_bits': (self.addr_width-1, 0),
                'description': 'Address'
            },
            'data': {
                'bits': self.data_width,
                'default': 0,
                'format': 'hex',
                'display_width': 8,
                'active_bits': (self.data_width-1, 0),
                'description': 'Data'
            },
            'strb': {
                'bits': self.data_width // 8,
                'default': 0xFF,
                'format': 'bin',
                'display_width': 4,
                'active_bits': (self.data_width//8-1, 0),
                'description': 'Byte strobe'
            },
            'ack': {
                'bits': 1,
                'default': 0,
                'format': 'bin',
                'display_width': 1,
                'active_bits': (0, 0),
                'description': 'Acknowledge'
            }
        }
        
        # Set up BFM components
        self.master = GAXIMaster(
            dut, 'Master', '', self.clk,
            field_config=self.field_config,
            log=self.log
        )
        
        self.slave = GAXISlave(
            dut, 'Slave', '', self.clk,
            field_config=self.field_config,
            log=self.log
        )
        
        # Create monitors
        self.master_monitor = GAXIMonitor(
            dut, 'Master Monitor', '', self.clk,
            field_config=self.field_config,
            is_slave=False,
            log=self.log
        )
        
        self.slave_monitor = GAXIMonitor(
            dut, 'Slave Monitor', '', self.clk,
            field_config=self.field_config,
            is_slave=True,
            log=self.log
        )
        
        # Create enhanced wrappers
        self.enhanced_master = EnhancedGAXIMaster(self.master, log=self.log)
        self.enhanced_slave = EnhancedGAXISlave(self.slave, memory_model=self.mem, log=self.log)
        
        # Create scoreboard
        self.scoreboard = GAXIScoreboard("GAXI_Scoreboard", self.field_config, log=self.log)
        
        # Connect monitors to scoreboard
        self.master_monitor.add_callback(self._master_monitor_callback)
        self.slave_monitor.add_callback(self._slave_monitor_callback)
        
        # Enable slave command processor
        self.enhanced_slave.start_processor()
        
    def _master_monitor_callback(self, transaction):
        """Callback for master monitor"""
        self.log.debug(f"Master monitor callback: {transaction.formatted(compact=True)}")
        self.scoreboard.add_expected(transaction)
        
    def _slave_monitor_callback(self, transaction):
        """Callback for slave monitor"""
        self.log.debug(f"Slave monitor callback: {transaction.formatted(compact=True)}")
        self.scoreboard.add_actual(transaction)
        
        # If this is a response packet, forward it to the master
        if 'ack' in transaction.fields and transaction.fields['ack'] == 1:
            self.enhanced_master.handle_response(transaction)
        
    async def reset_dut(self):
        """Reset the DUT and all components"""
        self.log.info("Resetting DUT and components")
        
        # Assert reset
        self.rstn.value = 0
        
        # Reset BFM components
        await self.master.reset_bus()
        await self.slave.reset_bus()
        
        # Clear scoreboard
        self.scoreboard.clear()
        
        # Wait for multiple cycles
        await self.wait_clocks('clk', 5)
        
        # Release reset
        self.rstn.value = 1
        
        # Wait for stabilization
        await self.wait_clocks('clk', 10)
        
        self.log.info("Reset complete")
    
    async def memory_test(self, num_transactions=10):
        """Run a simple memory read/write test"""
        self.log.info(f"Running memory test with {num_transactions} transactions")
        
        # Prepare test addresses and data
        test_addresses = [i * 4 for i in range(num_transactions)]
        test_data = [random.randint(0, 0xFFFFFFFF) for _ in range(num_transactions)]
        
        # First perform writes
        self.log.info("Performing memory writes")
        for i in range(num_transactions):
            addr = test_addresses[i]
            data = test_data[i]
            self.log.info(f"Write: addr=0x{addr:08X}, data=0x{data:08X}")
            
            # Write memory through enhanced master
            result = await self.enhanced_master.write_memory(addr, data)
            
            # Verify success
            assert result, f"Write to address 0x{addr:08X} failed"
            
        # Wait for stability
        await self.wait_clocks('clk', 10)
        
        # Then perform reads
        self.log.info("Performing memory reads")
        for i in range(num_transactions):
            addr = test_addresses[i]
            expected_data = test_data[i]
            self.log.info(f"Read: addr=0x{addr:08X}, expecting=0x{expected_data:08X}")
            
            # Read memory through enhanced master
            data = await self.enhanced_master.read_memory(addr)
            
            # Verify data matches
            assert data == expected_data, \
                f"Data mismatch at address 0x{addr:08X}: expected=0x{expected_data:08X}, got=0x{data:08X}"
        
        # Validate scoreboard
        errors = self.scoreboard.report()
        assert errors == 0, f"Scoreboard found {errors} errors"
        
        self.log.info("Memory test completed successfully")
        
    async def run_test(self):
        """Main test executor"""
        try:
            # Reset the DUT
            await self.reset_dut()
            
            # Run memory test
            await self.memory_test(20)
            
            # Validate final scoreboard
            errors = self.scoreboard.report()
            self.log.info(f"Final scoreboard report: {self.scoreboard.transaction_count} transactions, {errors} errors")
            assert errors == 0, f"Test failed with {errors} errors"
            
        finally:
            # Stop slave processor
            self.enhanced_slave.stop_processor()
            
            # Wait for stability
            await self.wait_clocks('clk', 10)
