<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="659px" preserveAspectRatio="none" style="width:919px;height:659px;background:#FFFFFF;" version="1.1" viewBox="0 0 919 659" width="919px" zoomAndPan="magnify"><defs/><g><!--MD5=[2b7409a316d9d2e410653e6983353aed]
class Module--><g id="elem_Module"><rect codeLine="2" fill="#F1F1F1" height="390.2344" id="Module" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="436" x="7" y="262"/><ellipse cx="195.25" cy="278" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M198.2188,283.6406 Q197.6406,283.9375 197,284.0781 Q196.3594,284.2344 195.6563,284.2344 Q193.1563,284.2344 191.8281,282.5938 Q190.5156,280.9375 190.5156,277.8125 Q190.5156,274.6875 191.8281,273.0313 Q193.1563,271.375 195.6563,271.375 Q196.3594,271.375 197,271.5313 Q197.6563,271.6875 198.2188,271.9844 L198.2188,274.7031 Q197.5938,274.125 197,273.8594 Q196.4063,273.5781 195.7813,273.5781 Q194.4375,273.5781 193.75,274.6563 Q193.0625,275.7188 193.0625,277.8125 Q193.0625,279.9063 193.75,280.9844 Q194.4375,282.0469 195.7813,282.0469 Q196.4063,282.0469 197,281.7813 Q197.5938,281.5 198.2188,280.9219 L198.2188,283.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="215.75" y="282.8467">Module</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="442" y1="294" y2="294"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="304.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="27" y="310.9951">start_instructions: list</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="320.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="27" y="327.292">instructions: list</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="337.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="27" y="343.5889">end_instructions: list</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="353.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="27" y="359.8857">module_name: str</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="369.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="27" y="376.1826">instance_name: str</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="386.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="27" y="392.4795">params: Param</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="402.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="27" y="408.7764">ports: Signal</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="418.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="27" y="425.0732">wires: list</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="442" y1="432.375" y2="432.375"/><ellipse cx="18" cy="446.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="375" x="27" y="449.3701">__init__(module_name: str = '', instance_name: str = '')</text><ellipse cx="18" cy="462.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="27" y="465.667">add_port_string(ports: str): void</text><ellipse cx="18" cy="478.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="27" y="481.9639">wire(name: str, _type: str): void</text><ellipse cx="18" cy="494.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="27" y="498.2607">start(): void</text><ellipse cx="18" cy="511.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="27" y="514.5576">end(): void</text><ellipse cx="18" cy="527.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="27" y="530.8545">stmt_assign(lhs: str, rhs: str): void</text><ellipse cx="18" cy="543.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="27" y="547.1514">instruction(instruction: str): void</text><ellipse cx="18" cy="560.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="27" y="563.4482">comment(c: str): void</text><ellipse cx="18" cy="576.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="27" y="579.7451">write(file_path: str, filename: str): void</text><ellipse cx="18" cy="592.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="27" y="596.042">instantiate(instance_name: str, inputs: list, outputs: list): str</text><ellipse cx="18" cy="608.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="27" y="612.3389">__str__(): str</text><ellipse cx="18" cy="625.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="27" y="628.6357">in_connector(port: str, connector: str): dict</text><ellipse cx="18" cy="641.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="27" y="644.9326">out_connector(port: str, connector: str): dict</text></g><!--MD5=[6aeeca00952b491a8048154aec86509b]
class MultiplierMixin--><g id="elem_MultiplierMixin"><rect codeLine="2" fill="#F1F1F1" height="113.1875" id="MultiplierMixin" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="434" x="478" y="400.5"/><ellipse cx="643.25" cy="416.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M646.2188,422.1406 Q645.6406,422.4375 645,422.5781 Q644.3594,422.7344 643.6563,422.7344 Q641.1563,422.7344 639.8281,421.0938 Q638.5156,419.4375 638.5156,416.3125 Q638.5156,413.1875 639.8281,411.5313 Q641.1563,409.875 643.6563,409.875 Q644.3594,409.875 645,410.0313 Q645.6563,410.1875 646.2188,410.4844 L646.2188,413.2031 Q645.5938,412.625 645,412.3594 Q644.4063,412.0781 643.7813,412.0781 Q642.4375,412.0781 641.75,413.1563 Q641.0625,414.2188 641.0625,416.3125 Q641.0625,418.4063 641.75,419.4844 Q642.4375,420.5469 643.7813,420.5469 Q644.4063,420.5469 645,420.2813 Q645.5938,420 646.2188,419.4219 L646.2188,422.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="663.75" y="421.3467">MultiplierMixin</text><line style="stroke:#181818;stroke-width:0.5;" x1="479" x2="911" y1="432.5" y2="432.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="479" x2="911" y1="440.5" y2="440.5"/><ellipse cx="489" cy="454.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="498" y="457.4951">partial_products(N: int): Dict[int, List[str]]</text><ellipse cx="489" cy="470.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="381" x="498" y="473.792">partial_products_booth_radix_4(N: int): Dict[int, List[str]]</text><ellipse cx="489" cy="486.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="408" x="498" y="490.0889">generate_final_addition(bit_groups: Dict[int, List[str]], N: int)</text><ellipse cx="489" cy="503.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="498" y="506.3857">generate_final_assignments(N: int)</text></g><!--MD5=[873cf4db0a035e6b261241f09663fc7c]
class DaddaTree--><g id="elem_DaddaTree"><rect codeLine="4" fill="#F1F1F1" height="194.6719" id="DaddaTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="517" x="201.5" y="7"/><ellipse cx="417.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M420.2188,28.6406 Q419.6406,28.9375 419,29.0781 Q418.3594,29.2344 417.6563,29.2344 Q415.1563,29.2344 413.8281,27.5938 Q412.5156,25.9375 412.5156,22.8125 Q412.5156,19.6875 413.8281,18.0313 Q415.1563,16.375 417.6563,16.375 Q418.3594,16.375 419,16.5313 Q419.6563,16.6875 420.2188,16.9844 L420.2188,19.7031 Q419.5938,19.125 419,18.8594 Q418.4063,18.5781 417.7813,18.5781 Q416.4375,18.5781 415.75,19.6563 Q415.0625,20.7188 415.0625,22.8125 Q415.0625,24.9063 415.75,25.9844 Q416.4375,27.0469 417.7813,27.0469 Q418.4063,27.0469 419,26.7813 Q419.5938,26.5 420.2188,25.9219 L420.2188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="437.75" y="27.8467">DaddaTree</text><line style="stroke:#181818;stroke-width:0.5;" x1="202.5" x2="717.5" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="209.5" y="49.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="221.5" y="55.9951">module_str: str</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="209.5" y="65.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="221.5" y="72.292">param_str: str</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="209.5" y="82.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="221.5" y="88.5889">port_str: str</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="209.5" y="98.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="221.5" y="104.8857">buswidth: int</text><line style="stroke:#181818;stroke-width:0.5;" x1="202.5" x2="717.5" y1="112.1875" y2="112.1875"/><ellipse cx="212.5" cy="125.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="221.5" y="129.1826">__init__(buswidth: int)</text><ellipse cx="212.5" cy="142.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="221.5" y="145.4795">generate_dadda_numbers(n: int) : List[int]</text><ellipse cx="212.5" cy="158.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="451" x="221.5" y="161.7764">next_smaller_dadda_number(dadda_numbers: List[int], n: int) : int</text><ellipse cx="212.5" cy="174.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="221.5" y="178.0732">dadda_reduction(bit_groups: Dict[int, List[str]], N: int) : Dict[int, List[str]]</text><ellipse cx="212.5" cy="191.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="221.5" y="194.3701">verilog(file_path: str)</text></g><!--MD5=[3fded1c771411d4862a39b6669bcb5e0]
link DaddaTree to Module--><g id="link_DaddaTree_Module"><path codeLine="16" d="M395.16,202.2 C386.03,215.82 376.37,230.24 366.46,245.01 " fill="none" id="DaddaTree-to-Module" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="372.15,249.1,355.2,261.81,360.52,241.3,372.15,249.1" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[42195efc443f8559954800158d13290d]
link DaddaTree to MultiplierMixin--><g id="link_DaddaTree_MultiplierMixin"><path codeLine="17" d="M524.84,202.2 C563.31,259.58 611.28,331.13 646.47,383.61 " fill="none" id="DaddaTree-to-MultiplierMixin" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="652.32,379.78,657.65,400.29,640.7,387.58,652.32,379.78" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1459cce5161cd92c4c71da2c48b15299]
@startuml Multiplier_DaddaTree
!include verilog_Module_UML.puml
!include Multiplier_Mixin_UML.puml

class DaddaTree {
  - module_str: str
  - param_str: str
  - port_str: str
  - buswidth: int
  + __init__(buswidth: int)
  + generate_dadda_numbers(n: int) : List[int]
  + next_smaller_dadda_number(dadda_numbers: List[int], n: int) : int
  + dadda_reduction(bit_groups: Dict[int, List[str]], N: int) : Dict[int, List[str]]
  + verilog(file_path: str)
}

DaddaTree - -|> Module
DaddaTree - -|> MultiplierMixin

@enduml

@startuml Multiplier_DaddaTree

class Module {
  - start_instructions: list
  - instructions: list
  - end_instructions: list
  - module_name: str
  - instance_name: str
  - params: Param
  - ports: Signal
  - wires: list

  + __init__(module_name: str = '', instance_name: str = '')
  + add_port_string(ports: str): void
  + wire(name: str, _type: str): void
  + start(): void
  + end(): void
  + stmt_assign(lhs: str, rhs: str): void
  + instruction(instruction: str): void
  + comment(c: str): void
  + write(file_path: str, filename: str): void
  + instantiate(instance_name: str, inputs: list, outputs: list): str
  + __str__(): str
  + in_connector(port: str, connector: str): dict
  + out_connector(port: str, connector: str): dict
}


class MultiplierMixin {
  + partial_products(N: int): Dict[int, List[str]]
  + partial_products_booth_radix_4(N: int): Dict[int, List[str]]
  + generate_final_addition(bit_groups: Dict[int, List[str]], N: int)
  + generate_final_assignments(N: int)
}


class DaddaTree {
  - module_str: str
  - param_str: str
  - port_str: str
  - buswidth: int
  + __init__(buswidth: int)
  + generate_dadda_numbers(n: int) : List[int]
  + next_smaller_dadda_number(dadda_numbers: List[int], n: int) : int
  + dadda_reduction(bit_groups: Dict[int, List[str]], N: int) : Dict[int, List[str]]
  + verilog(file_path: str)
}

DaddaTree - -|> Module
DaddaTree - -|> MultiplierMixin

@enduml

PlantUML version 1.2022.7(Mon Aug 22 10:01:30 PDT 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>