@startuml sink_sram_control_fsm
!theme plain
title Sink SRAM Control - Control Logic (sink_sram_control.sv)

skinparam state {
  BackgroundColor LightSalmon
  BorderColor DarkRed
  ArrowColor DarkRed
  ArrowFontColor Black
  ArrowFontSize 10
}

[*] --> IDLE

state IDLE {
  IDLE : Monitor write and read requests
  IDLE : Coordinate control operations
  IDLE : Channel availability management
}
state WRITE_READY {
  WRITE_READY : Validate write request
  WRITE_READY : Check channel space availability
  WRITE_READY : Prepare SRAM write operation
}
state WRITE_EXECUTE {
  WRITE_EXECUTE : Execute SRAM write
  WRITE_EXECUTE : Update pointers and counters
  WRITE_EXECUTE : Handle stream boundaries
}
state READ_ARBITRATE {
  READ_ARBITRATE : Round-robin channel selection
  READ_ARBITRATE : Priority handling for boundaries
  READ_ARBITRATE : Threshold-based arbitration
}
state READ_EXECUTE {
  READ_EXECUTE : Execute SRAM read
  READ_EXECUTE : Extract metadata and boundaries
  READ_EXECUTE : Forward data to AXI engine
}
state CONSUMPTION_NOTIFY {
  CONSUMPTION_NOTIFY : Generate consumption notification
  CONSUMPTION_NOTIFY : Credit return coordination
}
state ERROR {
  ERROR : Handle overflow and error conditions
  ERROR : Error recovery and reporting
}
state BARRIER_MGMT {
  BARRIER_MGMT : Manage stream boundary barriers
  BARRIER_MGMT : Set/clear barrier flags
}

IDLE -down-> WRITE_READY : wr_valid (from MNOC Slave)
IDLE -right-> READ_ARBITRATE : read_request_pending
WRITE_READY -down-> WRITE_EXECUTE : space_available & chunk_valid
WRITE_READY -down-> ERROR : space_unavailable | invalid_chunks
WRITE_EXECUTE -right-> BARRIER_MGMT : boundary_detected (EOS)
WRITE_EXECUTE -up-> IDLE : write_complete & no_boundary
BARRIER_MGMT -up-> IDLE : barrier_set
BARRIER_MGMT -down-> ERROR : barrier_error
READ_ARBITRATE -right-> READ_EXECUTE : channel_granted & threshold_met
READ_EXECUTE -right-> CONSUMPTION_NOTIFY : read_accepted_by_axi
READ_EXECUTE -down-> ERROR : read_error
CONSUMPTION_NOTIFY -up-> IDLE : consumption_ack_sent
ERROR -up-> IDLE : error_recovery

note bottom
<b>Control Logic Architecture:</b>

<b>Single Write Interface (from MNOC Slave):</b>
```systemverilog
input  logic                        wr_valid,
output logic                        wr_ready,
input  logic [DATA_WIDTH-1:0]       wr_data,
input  logic [CHAN_BITS-1:0]        wr_channel,
input  logic [1:0]                  wr_type,
input  logic                        wr_eos,
input  logic [NUM_CHUNKS-1:0]       wr_chunk_en,
```

<b>RDA Packet Bypass:</b>
- RDA packets bypass SRAM entirely
- RDA flow: MNOC Slave → Descriptor Engine (direct)
- Only FC/TS packets use SRAM buffering

<b>SRAM Storage Format (533 bits total):</b>
```systemverilog
// SRAM entry format:
// {EOS, TYPE[1:0], CHUNK_VALID[15:0], DATA[511:0]} = 533 bits
localparam int SRAM_WIDTH = 1 + 2 + NUM_CHUNKS + DATA_WIDTH;

// Write data composition
assign w_sram_wr_data = {
    wr_eos,                          // Bit 532: EOS flag
    wr_type,                         // Bits 531:530: Packet type
    wr_chunk_en,                     // Bits 529:514: Chunk enables
    wr_data                          // Bits 513:0: Data payload
};
```

<b>Multi-Channel Read Interface:</b>
```systemverilog
output logic [CHANNELS-1:0]         rd_valid,
input  logic [CHANNELS-1:0]         rd_ready,
output logic [DATA_WIDTH-1:0]       rd_data [CHANNELS],
output logic [1:0]                  rd_type [CHANNELS],
output logic [CHANNELS-1:0]         rd_eos,
output logic [NUM_CHUNKS-1:0]       rd_chunk_valid [CHANNELS],
```

<b>State Functions:</b>

IDLE:
- Monitor write requests from MNOC Slave
- Monitor read requests from AXI Write Engine
- Coordinate control operations

WRITE_READY:
- Validate incoming data and chunk enables
- Check channel space availability
- Prepare SRAM write with metadata

WRITE_EXECUTE:
- Execute SRAM write with 533-bit entry format
- Update write pointers and used counters
- Handle EOS boundary processing

READ_ARBITRATE:
- Round-robin arbitration among ready channels
- Priority for channels with stream boundaries
- Threshold-based selection (minimum entries)

READ_EXECUTE:
- Extract data and metadata from SRAM
- Forward complete information to AXI engine
- Update read pointers and available space

CONSUMPTION_NOTIFY:
- Generate data consumption notifications
- Coordinate credit return for MNOC flow control

BARRIER_MGMT:
- Manage EOS stream boundary barriers
- Prevent data corruption across boundaries
- Coordinate barrier set/clear operations

<b>Data Flow:</b>
```
FC/TS Packets: MNOC Slave → Sink SRAM Control → AXI Write Engine
                    ↓              ↓                    ↓
               Single Write    533-bit Storage    Multi-Channel Read
               Interface       + EOS Boundaries   + Chunk Forwarding

RDA Packets:   MNOC Slave → Descriptor Engine (BYPASS)
```

<b>Performance Characteristics:</b>
- Write Throughput: 1 write/cycle when space available
- Read Throughput: 1 read/cycle/channel with arbitration
- Metadata Overhead: 4.1% (21 metadata bits / 533 total bits)
- Buffer Efficiency: 95%+ with threshold-based flow control
@enduml