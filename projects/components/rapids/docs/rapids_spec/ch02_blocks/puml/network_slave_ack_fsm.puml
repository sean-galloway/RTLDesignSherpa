@startuml mnoc_slave_ack_fsm
!theme plain
title MNOC Slave ACK State Machine (mnoc_slave.sv)

skinparam state {
  BackgroundColor LightPink
  BorderColor Red
  ArrowColor Red
  ArrowFontColor Black
  ArrowFontSize 10
}

[*] --> ACK_IDLE

state ACK_IDLE {
  ACK_IDLE : Ready for new ACK requests
  ACK_IDLE : Monitor packet arrivals
  ACK_IDLE : Priority arbitration
}
state ACK_PACKET_PENDING {
  ACK_PACKET_PENDING : Packet ACK queued in FIFO
  ACK_PACKET_PENDING : Higher priority than credit ACKs
}
state ACK_PACKET_ACTIVE {
  ACK_PACKET_ACTIVE : Packet ACK being transmitted
  ACK_PACKET_ACTIVE : Monitor for handshake completion
}
state ACK_CREDIT_PENDING {
  ACK_CREDIT_PENDING : Credit ACK queued in FIFO
  ACK_CREDIT_PENDING : Lower priority (flow control)
}
state ACK_CREDIT_ACTIVE {
  ACK_CREDIT_ACTIVE : Credit ACK being transmitted
  ACK_CREDIT_ACTIVE : Monitor for handshake completion
}
state ACK_ERROR {
  ACK_ERROR : Error state for recovery
  ACK_ERROR : Reset required for recovery
}

ACK_IDLE -down-> ACK_PACKET_PENDING : packet_ack_request & !credit_ack_active
ACK_IDLE -right-> ACK_CREDIT_PENDING : credit_ack_request & !packet_ack_pending
ACK_IDLE -down-> ACK_ERROR : invalid_ack_request
ACK_PACKET_PENDING -down-> ACK_PACKET_ACTIVE : ack_interface_ready
ACK_PACKET_ACTIVE -up-> ACK_IDLE : packet_ack_complete & !more_acks_pending
ACK_PACKET_ACTIVE -right-> ACK_CREDIT_PENDING : packet_ack_complete & credit_ack_pending
ACK_PACKET_ACTIVE -down-> ACK_ERROR : ack_transmission_failed
ACK_CREDIT_PENDING -down-> ACK_CREDIT_ACTIVE : ack_interface_ready & !packet_ack_pending
ACK_CREDIT_PENDING -left-> ACK_PACKET_PENDING : packet_ack_request_priority
ACK_CREDIT_ACTIVE -up-> ACK_IDLE : credit_ack_complete & !more_acks_pending
ACK_CREDIT_ACTIVE -left-> ACK_PACKET_PENDING : credit_ack_complete & packet_ack_pending
ACK_CREDIT_ACTIVE -down-> ACK_ERROR : ack_transmission_failed
ACK_ERROR -up-> ACK_IDLE : system_reset

note bottom
<b>Signal Definitions:</b>

packet_ack_request = s_mnoc_pkt_valid & s_mnoc_pkt_ready (packet received successfully)
credit_ack_request = stream_boundary_detected (EOS/EOL/EOD) | credit_return_needed
ack_interface_ready = m_mnoc_ack_ready (network ready to accept ACK)

packet_ack_complete = m_mnoc_ack_valid & m_mnoc_ack_ready & packet_ack_active
credit_ack_complete = m_mnoc_ack_valid & m_mnoc_ack_ready & credit_ack_active

more_acks_pending = !packet_ack_fifo_empty | !credit_ack_fifo_empty
packet_ack_request_priority = packet_ack_fifo_not_empty (higher priority)

<b>ACK Request Structure:</b>
```systemverilog
typedef struct packed {
    logic [ADDR_WIDTH-1:0]   addr;
    logic                    addr_par;
    logic [1:0]              ack_type;
    logic                    par;
    logic [CHAN_WIDTH-1:0]   channel;
    logic [31:0]             timestamp;
} ack_request_t;
```

<b>ACK Types:</b>
- SIMPLE_ACK (2'b00): Basic packet acknowledgment
- START_ACK (2'b01): Start of stream acknowledgment
- CREDIT_ACK (2'b10): Credit return acknowledgment  
- STOP_AT_EOS_ACK (2'b11): Stop at EOS acknowledgment

<b>Priority Rules:</b>
1. **Packet ACKs**: Higher priority (immediate response to received packets)
2. **Credit ACKs**: Lower priority (flow control and stream boundary notifications)
3. **FIFO Queuing**: Prevents ACK loss under network congestion
4. **State Machine**: Proper arbitration without priority inversion

<b>State Functions:</b>

ACK_IDLE:
- Monitor for packet reception requiring acknowledgment
- Check for credit return or stream boundary conditions
- Arbitrate between packet and credit ACK priorities

ACK_PACKET_PENDING:
- Packet ACK queued in 4-entry FIFO
- Higher priority than credit ACKs
- Wait for ACK interface availability

ACK_PACKET_ACTIVE:
- Transmit packet ACK to network
- Monitor for successful handshake completion
- Handle transmission errors

ACK_CREDIT_PENDING:
- Credit ACK queued in 8-entry FIFO
- Lower priority (can be preempted by packet ACKs)
- Flow control and stream boundary notifications

ACK_CREDIT_ACTIVE:
- Transmit credit ACK to network
- Monitor for successful handshake completion
- Handle transmission errors

ACK_ERROR:
- Handle ACK transmission failures
- Requires system reset for recovery
- Should not occur in normal operation

<b>FIFO Architecture:</b>
- **Packet ACK FIFO**: 4 entries for immediate packet responses
- **Credit ACK FIFO**: 8 entries for flow control and stream boundaries
- **Overflow Prevention**: Backpressure to prevent FIFO overflow
- **Priority Handling**: Packet ACKs preempt credit ACKs

<b>Zero ACK Loss Guarantee:</b>
- FIFO-based queuing prevents ACK loss under congestion
- Priority arbitration ensures timely packet acknowledgments
- Error detection and recovery for transmission failures
- Comprehensive validation at all stages
@enduml