@startuml descriptor_engine_fsm
!theme plain
title Descriptor Engine FSM (descriptor_engine.sv)

skinparam state {
  BackgroundColor LightCyan
  BorderColor DarkCyan
  ArrowColor DarkCyan
  ArrowFontColor Black
  ArrowFontSize 10
}

[*] --> read_IDLE

state read_IDLE {
  read_IDLE : descriptor_engine_idle = true when:
  read_IDLE : • FSM in read_IDLE state
  read_IDLE : • All FIFOs empty (APB, RDA, descriptor)
  read_IDLE : • No active operations
  read_IDLE : • !r_channel_reset_active
}
state read_ISSUE_ADDR {
  read_ISSUE_ADDR : Issue AXI read transaction
  read_ISSUE_ADDR : Address validation performed
  read_ISSUE_ADDR : APB request processing
}
state read_WAIT_DATA {
  read_WAIT_DATA : Waiting for AXI read completion
  read_WAIT_DATA : Monitor response with our channel ID
  read_WAIT_DATA : Channel reset waits for completion
}
state read_COMPLETE {
  read_COMPLETE : Validate descriptor data
  read_COMPLETE : Extract EOS/EOL/EOD fields
  read_COMPLETE : Load descriptor into output FIFO
  read_COMPLETE : Generate monitor events
}
state read_ERROR {
  read_ERROR : Error recovery state
  read_ERROR : Clear when conditions resolve
}

read_IDLE -down-> read_ISSUE_ADDR : w_apb_skid_valid_out & w_apb_skid_ready_out & !r_rda_operation_active & !r_channel_reset_active
read_IDLE -right-> read_COMPLETE : w_rda_skid_valid_out & w_rda_skid_ready_out & !r_apb_operation_active & !r_channel_reset_active
read_IDLE -down-> read_ERROR : r_descriptor_error & !r_channel_reset_active
read_ISSUE_ADDR -down-> read_WAIT_DATA : ar_ready
read_ISSUE_ADDR -down-> read_ERROR : ar_timeout | address_error
read_WAIT_DATA -right-> read_COMPLETE : w_our_axi_response & r_valid & w_axi_response_ok
read_WAIT_DATA -down-> read_ERROR : w_our_axi_response & r_valid & !w_axi_response_ok | axi_timeout
read_COMPLETE -up-> read_IDLE : w_desc_fifo_wr_ready | validation_error
read_ERROR -up-> read_IDLE : error_acknowledged | r_channel_reset_active

note bottom
<b>Signal Definitions (descriptor_engine.sv):</b>

w_apb_skid_valid_out = APB request available in skid buffer
w_rda_skid_valid_out = RDA packet available in skid buffer
r_apb_operation_active = APB operation in progress (prevents RDA)
r_rda_operation_active = RDA operation in progress (prevents APB)
r_channel_reset_active = channel reset state flag

w_our_axi_response = r_valid & (r_id[CHAN_WIDTH-1:0] == CHANNEL_ID[CHAN_WIDTH-1:0])
w_axi_response_ok = (r_resp == 2'b00) // OKAY response

w_desc_fifo_wr_ready = descriptor output FIFO ready to accept
validation_error = address range or descriptor format error

<b>Dual-Path Processing:</b>

<b>APB Programming Flow:</b>
1. APB request queued in 2-deep APB skid buffer
2. Priority check: APB processed only when no RDA packets present
3. AXI read transaction with channel ID
4. Response monitoring for matching channel ID
5. Descriptor validation and FIFO push

<b>RDA Packet Flow:</b>
1. RDA packet received from MNOC slave
2. Priority processing: RDA always processed before APB
3. Direct validation and processing (no AXI required)
4. Stream boundary extraction
5. Descriptor output with metadata

<b>State Functions:</b>

read_IDLE:
- Dual-path arbitration (RDA priority over APB)
- FIFO monitoring and operation exclusivity
- Channel reset coordination

read_ISSUE_ADDR:
- AXI read address phase for APB requests
- Address validation and error detection
- Channel ID encoding for response routing

read_WAIT_DATA:
- AXI response monitoring with channel ID matching
- Timeout detection and error handling
- Channel reset completion handling

read_COMPLETE:
- Descriptor validation and field extraction
- Stream boundary processing (EOS/EOL/EOD)
- Output FIFO management
- Monitor event generation

read_ERROR:
- Error state with recovery capability
- Supports both timeout and protocol errors
- Channel reset provides error recovery path

<b>Stream Boundary Support:</b>
- Complete EOS/EOL/EOD field extraction
- Stream boundary validation and propagation
- Packet type support (FC/TS/RV/RAW)

<b>Channel Reset Behavior:</b>
- Graceful shutdown with AXI transaction completion
- Safe state transitions during reset
- Operation exclusivity maintained
@enduml