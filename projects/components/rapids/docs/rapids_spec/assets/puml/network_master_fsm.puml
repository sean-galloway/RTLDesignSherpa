@startuml mnoc_master_fsm
!theme plain
title MNOC Master Pipeline States (mnoc_master.sv)

skinparam state {
  BackgroundColor LightGreen
  BorderColor DarkGreen
  ArrowColor DarkGreen
  ArrowFontColor Black
  ArrowFontSize 10
}

[*] --> IDLE

state IDLE {
  IDLE : Ready for new data requests
  IDLE : Monitor input validation
  IDLE : Initialize pipeline
}
state INPUT_FIFO {
  INPUT_FIFO : Queue validated input data
  INPUT_FIFO : Decouple ready logic from credits
  INPUT_FIFO : Buffer management
}
state PIPELINE_STAGE_0 {
  PIPELINE_STAGE_0 : Input validation and routing
  PIPELINE_STAGE_0 : Credit availability check
  PIPELINE_STAGE_0 : Channel selection
}
state PIPELINE_STAGE_1 {
  PIPELINE_STAGE_1 : Data validation and formatting
  PIPELINE_STAGE_1 : Chunk enable processing
  PIPELINE_STAGE_1 : Stream boundary validation
}
state PIPELINE_STAGE_2 {
  PIPELINE_STAGE_2 : Final packet preparation
  PIPELINE_STAGE_2 : Address and parity generation
  PIPELINE_STAGE_2 : Timeout monitoring
}
state PIPELINE_STAGE_3 {
  PIPELINE_STAGE_3 : Output preparation
  PIPELINE_STAGE_3 : Final validation
  PIPELINE_STAGE_3 : Interface readiness check
}
state OUTPUT_READY {
  OUTPUT_READY : Ready for transmission
  OUTPUT_READY : Credit double-check
  OUTPUT_READY : Network interface monitoring
}
state TRANSMISSION {
  TRANSMISSION : Packet transmission active
  TRANSMISSION : Monitor handshake completion
  TRANSMISSION : Handle transmission errors
}
state EOS_PROCESSING {
  EOS_PROCESSING : Process stream boundaries
  EOS_PROCESSING : Generate completion notifications
  EOS_PROCESSING : Credit return coordination
}
state CREDIT_WAIT {
  CREDIT_WAIT : Wait for credit availability
  CREDIT_WAIT : Monitor credit updates
  CREDIT_WAIT : Timeout handling
}
state TIMEOUT_HANDLING {
  TIMEOUT_HANDLING : Handle timeout conditions
  TIMEOUT_HANDLING : Timeout recovery procedures
}
state ERROR_RECOVERY {
  ERROR_RECOVERY : Error condition handling
  ERROR_RECOVERY : Recovery procedures
  ERROR_RECOVERY : System reset coordination
}

IDLE -down-> INPUT_FIFO : fub_valid & input_validation_ok
IDLE -right-> ERROR_RECOVERY : fub_valid & input_validation_failed

INPUT_FIFO -down-> PIPELINE_STAGE_0 : fifo_not_empty & stage0_ready
INPUT_FIFO -up-> IDLE : fifo_empty

PIPELINE_STAGE_0 -down-> PIPELINE_STAGE_1 : credit_check_passed & stage1_ready
PIPELINE_STAGE_0 -right-> CREDIT_WAIT : credit_check_failed
PIPELINE_STAGE_0 -right-> ERROR_RECOVERY : data_validation_failed

PIPELINE_STAGE_1 -down-> PIPELINE_STAGE_2 : validation_complete & stage2_ready
PIPELINE_STAGE_1 -right-> ERROR_RECOVERY : pipeline_validation_failed

PIPELINE_STAGE_2 -down-> PIPELINE_STAGE_3 : processing_complete & stage3_ready
PIPELINE_STAGE_2 -right-> TIMEOUT_HANDLING : timeout_detected

PIPELINE_STAGE_3 -down-> OUTPUT_READY : final_validation_passed & mnoc_interface_ready
PIPELINE_STAGE_3 -right-> ERROR_RECOVERY : final_validation_failed

OUTPUT_READY -down-> TRANSMISSION : mnoc_pkt_ready & credit_double_check_passed
OUTPUT_READY -right-> CREDIT_WAIT : credit_exhausted

TRANSMISSION -down-> EOS_PROCESSING : packet_sent & stream_boundary_detected
TRANSMISSION -up-> IDLE : packet_sent & normal_completion
TRANSMISSION -right-> ERROR_RECOVERY : transmission_error

EOS_PROCESSING -up-> IDLE : stream_boundary_processed & credit_return_complete
EOS_PROCESSING -right-> TIMEOUT_HANDLING : eos_processing_timeout

CREDIT_WAIT -up-> PIPELINE_STAGE_0 : credit_received & validation_ok
CREDIT_WAIT -right-> TIMEOUT_HANDLING : credit_timeout
CREDIT_WAIT -right-> ERROR_RECOVERY : credit_protocol_error

TIMEOUT_HANDLING -up-> IDLE : timeout_resolved
TIMEOUT_HANDLING -right-> ERROR_RECOVERY : timeout_unrecoverable

ERROR_RECOVERY -up-> IDLE : error_cleared & system_reset_complete

note bottom
<b>Pipeline Architecture:</b>

<b>Input Validation:</b>
input_validation_ok = data_valid & chunk_valid & stream_boundary_valid & channel_valid
- chunk_valid = (packet_type == RAW) || (|chunk_enables)
- stream_boundary_valid = $countones({eos,eol,eod}) <= 1
- channel_valid = (channel < NUM_CHANNELS)
- data_valid = proper_data_format & parity_ok

<b>Input FIFO Decoupling:</b>
fub_ready = !input_fifo_full & !input_fifo_almost_full
// Credit checking moved to pipeline stages

<b>Credit System:</b>
credit_check_passed = credits_available[channel] > 0
credit_double_check_passed = final_credit_verification
credit_exhausted = credits_available[channel] == 0

<b>Pipeline Data Structure:</b>
```systemverilog
typedef struct packed {
    logic [DATA_WIDTH-1:0]   data;
    logic [CHAN_WIDTH-1:0]   chan;
    logic [1:0]              pkt_type;
    logic [NUM_CHUNKS-1:0]   chunk_en;
    logic                    eos;
    logic [31:0]             timestamp;
    logic                    validated;
} pipeline_data_t;
```

<b>Stream Boundary Processing:</b>
stream_boundary_detected = eos | eol | eod
stream_boundary_processed = completion_notification_sent & credit_return_complete

<b>Error Conditions:</b>
- Input validation failures
- Credit protocol errors  
- Transmission timeouts
- Pipeline validation failures
- MNOC interface errors

<b>Performance Characteristics:</b>
- Pipeline Latency: 4-6 cycles from input to transmission
- Throughput: 1 packet/cycle in steady state
- Credit Overhead: <5% with proper flow control
- Error Recovery: 2-4 cycles for most error conditions

<b>MNOC Protocol Compliance:</b>
The MNOC protocol was updated to remove start/length fields and replace them with chunk enables for improved efficiency and flexibility in data transfer operations.

<b>Data Flow:</b>
Input → FIFO → 4-Stage Pipeline → Output → MNOC Network
Each stage validates and processes data incrementally for optimal performance.
@enduml