@startuml aw_arbiter_fsm

title AW Channel Arbiter FSM (Per-Slave Instance)

[*] --> IDLE : Reset / Power-On

state IDLE {
  IDLE : Entry: aw_grant_matrix[s] = 0
  IDLE : Entry: aw_grant_active[s] = 0
  IDLE : Wait for master AW requests
  IDLE : Round-robin priority tracking: aw_last_grant[s]
}

state GRANT_ACTIVE {
  GRANT_ACTIVE : Entry: Grant issued to winning master
  GRANT_ACTIVE : Entry: aw_grant_matrix[s][m] = 1
  GRANT_ACTIVE : Entry: aw_grant_active[s] = 1
  GRANT_ACTIVE : Grant locked until handshake completes
  GRANT_ACTIVE : AWVALID && AWREADY â†’ transaction complete
}

IDLE --> GRANT_ACTIVE : |aw_request_matrix[s]| > 0\nRound-robin arbitration\nSelects next master
GRANT_ACTIVE --> IDLE : m_axi_awvalid[s] &&\nm_axi_awready[s]\n(AW handshake complete)

note right of IDLE
  **Round-Robin Arbitration:**
  Priority rotates after each grant:
  - Start search from (aw_last_grant[s] + 1)
  - Find first requesting master
  - Update aw_last_grant[s] = winning master

  **Fairness Guarantee:**
  - No master starvation
  - All masters get equal opportunity
  - Priority rotation prevents monopolization
end note

note right of GRANT_ACTIVE
  **Grant Locking:**
  - Grant held until AW handshake completes
  - W channel follows AW grant (data path locked)
  - B channel uses ID table (not grant-based)

  **Independent from AR Arbitration:**
  - Read and write paths operate independently
  - No head-of-line blocking between reads/writes
  - Each slave has 2 arbiters: AW and AR
end note

note left of GRANT_ACTIVE
  **Address Phase Handshake:**

  AW transaction completes when:
    AWVALID = 1 (from master)
    AWREADY = 1 (from slave)
    Rising edge of clock

  After handshake:
  - Grant released
  - Arbiter returns to IDLE
  - Ready for next arbitration
end note

@enduml
