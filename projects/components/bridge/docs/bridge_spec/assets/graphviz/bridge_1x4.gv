// Bridge AXI4 Crossbar - 1 Master × 4 Slaves Configuration
// Module: bridge_axi4_flat_1x4
// Purpose: Single-master system with multi-slave addressing

digraph bridge_1x4 {
    rankdir=LR;
    node [shape=box, style="rounded,filled", fillcolor=lightblue];
    edge [fontsize=10];

    // Title
    label="Bridge AXI4 Crossbar: 1 Master × 4 Slaves\nModule: bridge_axi4_flat_1x4";
    labelloc="t";
    fontsize=14;

    // External Master
    master0 [label="Master 0\n(CPU)\n\nAW, W, B\nAR, R\nchannels", shape=doubleoctagon, fillcolor=palegreen];

    // Crossbar Core
    subgraph cluster_crossbar {
        label="Bridge Crossbar Core";
        style=filled;
        fillcolor=lightyellow;

        // Address Decode
        aw_decode [label="AW Address Decode\n\n0x00000000-0x0FFFFFFF → Slave 0 (DDR)\n0x10000000-0x1FFFFFFF → Slave 1 (SRAM)\n0x20000000-0x2FFFFFFF → Slave 2 (Periph)\n0x30000000-0x3FFFFFFF → Slave 3 (Flash)", fillcolor=lightcyan];
        ar_decode [label="AR Address Decode\n\n0x00000000-0x0FFFFFFF → Slave 0 (DDR)\n0x10000000-0x1FFFFFFF → Slave 1 (SRAM)\n0x20000000-0x2FFFFFFF → Slave 2 (Periph)\n0x30000000-0x3FFFFFFF → Slave 3 (Flash)", fillcolor=lightcyan];

        // Per-Slave Arbiters (Degenerate with 1 master)
        aw_arb0 [label="AW Arbiter S0\n\n(Pass-through)", fillcolor=khaki];
        aw_arb1 [label="AW Arbiter S1\n\n(Pass-through)", fillcolor=khaki];
        aw_arb2 [label="AW Arbiter S2\n\n(Pass-through)", fillcolor=khaki];
        aw_arb3 [label="AW Arbiter S3\n\n(Pass-through)", fillcolor=khaki];

        ar_arb0 [label="AR Arbiter S0\n\n(Pass-through)", fillcolor=khaki];
        ar_arb1 [label="AR Arbiter S1\n\n(Pass-through)", fillcolor=khaki];
        ar_arb2 [label="AR Arbiter S2\n\n(Pass-through)", fillcolor=khaki];
        ar_arb3 [label="AR Arbiter S3\n\n(Pass-through)", fillcolor=khaki];

        // Data Multiplexers (Degenerate)
        w_mux0 [label="W Mux S0", fillcolor=lightsteelblue];
        w_mux1 [label="W Mux S1", fillcolor=lightsteelblue];
        w_mux2 [label="W Mux S2", fillcolor=lightsteelblue];
        w_mux3 [label="W Mux S3", fillcolor=lightsteelblue];

        r_demux0 [label="R Demux S0", fillcolor=lightsteelblue];
        r_demux1 [label="R Demux S1", fillcolor=lightsteelblue];
        r_demux2 [label="R Demux S2", fillcolor=lightsteelblue];
        r_demux3 [label="R Demux S3", fillcolor=lightsteelblue];

        b_demux0 [label="B Demux S0", fillcolor=plum];
        b_demux1 [label="B Demux S1", fillcolor=plum];
        b_demux2 [label="B Demux S2", fillcolor=plum];
        b_demux3 [label="B Demux S3", fillcolor=plum];
    }

    // External Slaves
    subgraph cluster_slaves {
        label="External Slaves (4)";
        style=filled;
        fillcolor=lightcoral;

        slave0 [label="Slave 0\n(DDR)\n@ 0x0000_0000\n\nAW, W, B, AR, R", fillcolor=lightpink];
        slave1 [label="Slave 1\n(SRAM)\n@ 0x1000_0000\n\nAW, W, B, AR, R", fillcolor=lightpink];
        slave2 [label="Slave 2\n(Peripherals)\n@ 0x2000_0000\n\nAW, W, B, AR, R", fillcolor=lightpink];
        slave3 [label="Slave 3\n(Flash)\n@ 0x3000_0000\n\nAW, W, B, AR, R", fillcolor=lightpink];
    }

    // Write Path (AW, W, B) - Blue
    master0 -> aw_decode [label="AWADDR[0]", color=blue, style=bold];
    
    aw_decode -> aw_arb0 [label="Slave 0 selected", color=blue];
    aw_decode -> aw_arb1 [label="Slave 1 selected", color=blue];
    aw_decode -> aw_arb2 [label="Slave 2 selected", color=blue];
    aw_decode -> aw_arb3 [label="Slave 3 selected", color=blue];

    aw_arb0 -> w_mux0 [color=blue];
    aw_arb1 -> w_mux1 [color=blue];
    aw_arb2 -> w_mux2 [color=blue];
    aw_arb3 -> w_mux3 [color=blue];

    w_mux0 -> slave0 [label="AWVALID[0]\nAW signals", color=blue, style=bold];
    w_mux1 -> slave1 [label="AWVALID[1]\nAW signals", color=blue, style=bold];
    w_mux2 -> slave2 [label="AWVALID[2]\nAW signals", color=blue, style=bold];
    w_mux3 -> slave3 [label="AWVALID[3]\nAW signals", color=blue, style=bold];

    master0 -> w_mux0 [label="WDATA[0]", color=blue, style=dotted];
    master0 -> w_mux1 [label="WDATA[0]", color=blue, style=dotted];
    master0 -> w_mux2 [label="WDATA[0]", color=blue, style=dotted];
    master0 -> w_mux3 [label="WDATA[0]", color=blue, style=dotted];

    slave0 -> b_demux0 [label="BVALID[0]", color=purple, style=bold];
    slave1 -> b_demux1 [label="BVALID[1]", color=purple, style=bold];
    slave2 -> b_demux2 [label="BVALID[2]", color=purple, style=bold];
    slave3 -> b_demux3 [label="BVALID[3]", color=purple, style=bold];

    b_demux0 -> master0 [label="BRESP[0]", color=purple, style=dotted];
    b_demux1 -> master0 [label="BRESP[1]", color=purple, style=dotted];
    b_demux2 -> master0 [label="BRESP[2]", color=purple, style=dotted];
    b_demux3 -> master0 [label="BRESP[3]", color=purple, style=dotted];

    // Read Path (AR, R) - Green
    master0 -> ar_decode [label="ARADDR[0]", color=green, style=bold];

    ar_decode -> ar_arb0 [label="Slave 0 selected", color=green];
    ar_decode -> ar_arb1 [label="Slave 1 selected", color=green];
    ar_decode -> ar_arb2 [label="Slave 2 selected", color=green];
    ar_decode -> ar_arb3 [label="Slave 3 selected", color=green];

    ar_arb0 -> r_demux0 [color=green];
    ar_arb1 -> r_demux1 [color=green];
    ar_arb2 -> r_demux2 [color=green];
    ar_arb3 -> r_demux3 [color=green];

    r_demux0 -> slave0 [label="ARVALID[0]\nAR signals", color=green, style=bold];
    r_demux1 -> slave1 [label="ARVALID[1]\nAR signals", color=green, style=bold];
    r_demux2 -> slave2 [label="ARVALID[2]\nAR signals", color=green, style=bold];
    r_demux3 -> slave3 [label="ARVALID[3]\nAR signals", color=green, style=bold];

    slave0 -> r_demux0 [label="RVALID[0]\nRDATA", color=green, style=bold];
    slave1 -> r_demux1 [label="RVALID[1]\nRDATA", color=green, style=bold];
    slave2 -> r_demux2 [label="RVALID[2]\nRDATA", color=green, style=bold];
    slave3 -> r_demux3 [label="RVALID[3]\nRDATA", color=green, style=bold];

    r_demux0 -> master0 [label="RDATA[0]", color=green, style=dotted];
    r_demux1 -> master0 [label="RDATA[1]", color=green, style=dotted];
    r_demux2 -> master0 [label="RDATA[2]", color=green, style=dotted];
    r_demux3 -> master0 [label="RDATA[3]", color=green, style=dotted];

    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        fillcolor=white;

        leg_aw [label="Write Path (AW, W, B)", style=bold, color=blue];
        leg_ar [label="Read Path (AR, R)", style=bold, color=green];
        leg_resp [label="Response Routing", style=bold, color=purple];
        leg_note [label="Note: Arbiters are pass-through\nwith single master (no contention)", shape=note, fillcolor=lightyellow];
    }

    // Configuration Note
    config [label="Configuration\n\nNUM_MASTERS: 1\nNUM_SLAVES: 4\nDATA_WIDTH: 32\nADDR_WIDTH: 32\nID_WIDTH: 4\n\nAddress Map (256MB each):\nSlave 0 (DDR):   0x0000_0000 - 0x0FFF_FFFF\nSlave 1 (SRAM):  0x1000_0000 - 0x1FFF_FFFF\nSlave 2 (Periph):0x2000_0000 - 0x2FFF_FFFF\nSlave 3 (Flash): 0x3000_0000 - 0x3FFF_FFFF\n\nUse Case: Single-core CPU\naccessing memory-mapped resources", shape=note, fillcolor=lightgray];
}
