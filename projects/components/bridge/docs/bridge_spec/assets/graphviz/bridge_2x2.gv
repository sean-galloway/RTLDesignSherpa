// Bridge AXI4 Crossbar - 2 Masters × 2 Slaves Configuration
// Module: bridge_axi4_flat_2x2
// Purpose: Demonstrate full 5-channel AXI4 crossbar routing

digraph bridge_2x2 {
    rankdir=LR;
    node [shape=box, style="rounded,filled", fillcolor=lightblue];
    edge [fontsize=10];

    // Title
    label="Bridge AXI4 Crossbar: 2 Masters × 2 Slaves\nModule: bridge_axi4_flat_2x2";
    labelloc="t";
    fontsize=14;

    // External Masters
    subgraph cluster_masters {
        label="External Masters (2)";
        style=filled;
        fillcolor=lightgreen;

        master0 [label="Master 0\n(CPU)\n\nAW, W, B\nAR, R\nchannels", fillcolor=palegreen];
        master1 [label="Master 1\n(DMA)\n\nAW, W, B\nAR, R\nchannels", fillcolor=palegreen];
    }

    // Crossbar Core
    subgraph cluster_crossbar {
        label="Bridge Crossbar Core";
        style=filled;
        fillcolor=lightyellow;

        // Address Decode
        aw_decode [label="AW Address\nDecode\n\n0x00000000-0x0FFFFFFF → Slave 0\n0x10000000-0x1FFFFFFF → Slave 1", fillcolor=lightcyan];
        ar_decode [label="AR Address\nDecode\n\n0x00000000-0x0FFFFFFF → Slave 0\n0x10000000-0x1FFFFFFF → Slave 1", fillcolor=lightcyan];

        // Per-Slave Arbiters
        subgraph cluster_slave0_arb {
            label="Slave 0 Arbiters";
            style=filled;
            fillcolor=wheat;

            aw_arb0 [label="AW Arbiter\n\nRound-robin\nGrant lock", fillcolor=khaki];
            ar_arb0 [label="AR Arbiter\n\nRound-robin\nGrant lock", fillcolor=khaki];
        }

        subgraph cluster_slave1_arb {
            label="Slave 1 Arbiters";
            style=filled;
            fillcolor=wheat;

            aw_arb1 [label="AW Arbiter\n\nRound-robin\nGrant lock", fillcolor=khaki];
            ar_arb1 [label="AR Arbiter\n\nRound-robin\nGrant lock", fillcolor=khaki];
        }

        // Data Multiplexers
        w_mux0 [label="W Mux\nSlave 0\n\nFollows AW grant", fillcolor=lightsteelblue];
        w_mux1 [label="W Mux\nSlave 1\n\nFollows AW grant", fillcolor=lightsteelblue];
        r_demux0 [label="R Demux\nSlave 0\n\nFollows AR grant", fillcolor=lightsteelblue];
        r_demux1 [label="R Demux\nSlave 1\n\nFollows AR grant", fillcolor=lightsteelblue];

        // Response Routing
        b_demux0 [label="B Demux\nSlave 0\n\nID-based routing", fillcolor=plum];
        b_demux1 [label="B Demux\nSlave 1\n\nID-based routing", fillcolor=plum];
    }

    // External Slaves
    subgraph cluster_slaves {
        label="External Slaves (2)";
        style=filled;
        fillcolor=lightcoral;

        slave0 [label="Slave 0\n(DDR @ 0x0000_0000)\n\nAW, W, B\nAR, R\nchannels", fillcolor=lightpink];
        slave1 [label="Slave 1\n(SRAM @ 0x1000_0000)\n\nAW, W, B\nAR, R\nchannels", fillcolor=lightpink];
    }

    // Write Path (AW, W, B) - Blue
    master0 -> aw_decode [label="AWADDR[0]", color=blue, style=bold];
    master1 -> aw_decode [label="AWADDR[1]", color=blue, style=bold];
    
    aw_decode -> aw_arb0 [label="AW requests\nfor Slave 0", color=blue];
    aw_decode -> aw_arb1 [label="AW requests\nfor Slave 1", color=blue];

    aw_arb0 -> slave0 [label="AWVALID[0]\nAWADDR, AWID, etc.", color=blue, style=bold];
    aw_arb1 -> slave1 [label="AWVALID[1]\nAWADDR, AWID, etc.", color=blue, style=bold];

    master0 -> w_mux0 [label="WDATA[0], WSTRB[0]", color=blue, style=dotted];
    master0 -> w_mux1 [label="WDATA[0], WSTRB[0]", color=blue, style=dotted];
    master1 -> w_mux0 [label="WDATA[1], WSTRB[1]", color=blue, style=dotted];
    master1 -> w_mux1 [label="WDATA[1], WSTRB[1]", color=blue, style=dotted];

    w_mux0 -> slave0 [label="WVALID[0]\nWDATA, WSTRB", color=blue, style=bold];
    w_mux1 -> slave1 [label="WVALID[1]\nWDATA, WSTRB", color=blue, style=bold];

    slave0 -> b_demux0 [label="BVALID[0], BID[0]", color=purple, style=bold];
    slave1 -> b_demux1 [label="BVALID[1], BID[1]", color=purple, style=bold];

    b_demux0 -> master0 [label="BRESP[0]", color=purple, style=dotted];
    b_demux0 -> master1 [label="BRESP[0]", color=purple, style=dotted];
    b_demux1 -> master0 [label="BRESP[1]", color=purple, style=dotted];
    b_demux1 -> master1 [label="BRESP[1]", color=purple, style=dotted];

    // Read Path (AR, R) - Green
    master0 -> ar_decode [label="ARADDR[0]", color=green, style=bold];
    master1 -> ar_decode [label="ARADDR[1]", color=green, style=bold];

    ar_decode -> ar_arb0 [label="AR requests\nfor Slave 0", color=green];
    ar_decode -> ar_arb1 [label="AR requests\nfor Slave 1", color=green];

    ar_arb0 -> slave0 [label="ARVALID[0]\nARADDR, ARID, etc.", color=green, style=bold];
    ar_arb1 -> slave1 [label="ARVALID[1]\nARADDR, ARID, etc.", color=green, style=bold];

    slave0 -> r_demux0 [label="RVALID[0]\nRDATA, RID", color=green, style=bold];
    slave1 -> r_demux1 [label="RVALID[1]\nRDATA, RID", color=green, style=bold];

    r_demux0 -> master0 [label="RDATA[0]", color=green, style=dotted];
    r_demux0 -> master1 [label="RDATA[0]", color=green, style=dotted];
    r_demux1 -> master0 [label="RDATA[1]", color=green, style=dotted];
    r_demux1 -> master1 [label="RDATA[1]", color=green, style=dotted];

    // Clock & Reset
    clocks [label="Clock & Reset\n\naclk, aresetn", shape=ellipse, fillcolor=lightgoldenrod];
    clocks -> aw_arb0 [style=dashed, label="clk/rst"];
    clocks -> ar_arb0 [style=dashed, label="clk/rst"];

    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        fillcolor=white;

        leg_aw [label="Write Path (AW, W, B)", style=bold, color=blue];
        leg_ar [label="Read Path (AR, R)", style=bold, color=green];
        leg_resp [label="Response Routing (ID-based)", style=bold, color=purple];
        leg_arb [label="Round-Robin Arbiters", fillcolor=khaki, style=filled];
    }

    // Configuration Note
    config [label="Configuration\n\nNUM_MASTERS: 2\nNUM_SLAVES: 2\nDATA_WIDTH: 32\nADDR_WIDTH: 32\nID_WIDTH: 4\n\nAddress Map:\nSlave 0: 0x0000_0000 - 0x0FFF_FFFF (256MB)\nSlave 1: 0x1000_0000 - 0x1FFF_FFFF (256MB)", shape=note, fillcolor=lightgray];
}
