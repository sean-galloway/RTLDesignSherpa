// HPET Periodic Timer Operation
// Render with: dot -Tpng periodic_timer.dot -o periodic_timer.png

digraph periodic_timer {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="Timer Configured\n(Periodic Mode)", shape=ellipse, fillcolor=lightgreen];

    start -> timer_enabled;

    timer_enabled [label="Timer Enabled\nTIMER_CONFIG.enable = 1\nTIMER_CONFIG.type = 1\nPeriod = initial comparator"];
    timer_enabled -> counter_running;

    counter_running [label="Main Counter Running\nIncrements every hpet_clk", fillcolor=lightcyan];
    counter_running -> compare;

    compare [label="Compare:\ncounter >= comparator?", shape=diamond, fillcolor=lightyellow];
    compare -> wait_cycle [label="No"];
    compare -> fire_detect [label="Yes"];

    wait_cycle [label="Wait 1 Cycle", fillcolor=white];
    wait_cycle -> counter_running;

    fire_detect [label="Timer Fires!\n• IRQ asserts\n• Edge detection (0→1)", fillcolor=lightcoral];
    fire_detect -> auto_increment;

    auto_increment [label="Auto-Increment Comparator\ncomparator += period\n(Hardware automatic!)", fillcolor=lightgreen];
    auto_increment -> irq_check;

    irq_check [label="Interrupt\nenabled?", shape=diamond, fillcolor=lightyellow];
    irq_check -> irq_assert [label="Yes"];
    irq_check -> continue_running [label="No"];

    irq_assert [label="Interrupt Asserted\ntimer_irq[i] = 1\nHPET_STATUS[i] = 1", fillcolor=red, fontcolor=white];
    irq_assert -> sw_action;

    sw_action [label="Software Handles IRQ", shape=diamond, fillcolor=lightyellow];
    sw_action -> sw_clear [label="Clear IRQ"];
    sw_action -> sw_disable [label="Disable Timer"];

    sw_clear [label="Clear Interrupt\nWRITE(HPET_STATUS, 1<<i)\n(W1C)", fillcolor=lightgreen];
    sw_clear -> continue_running;

    sw_disable [label="Disable Timer\nWRITE(TIMER_CONFIG, 0x0)", fillcolor=orange];
    sw_disable -> end;

    continue_running [label="Timer Continues\nWaiting for next fire\nat (comparator + period)", fillcolor=lightcyan];
    continue_running -> counter_running;

    end [label="Timer Stopped\n(Software disabled)", shape=ellipse, fillcolor=orange];

    // Loop annotation
    loop [label="Repeats indefinitely\nuntil disabled", shape=note, fillcolor=yellow, style=filled];

    // Notes
    note1 [label="Note: Periodic timers\nfire REPEATEDLY", shape=note, fillcolor=lightyellow, style=filled];
    note2 [label="Note: Comparator\nauto-increments by period", shape=note, fillcolor=lightyellow, style=filled];

    {rank=same; timer_enabled; note1;}
    {rank=same; auto_increment; note2;}
    {rank=same; continue_running; loop;}
}
