// Graphviz Block Diagram: peakrdl_to_cmdrsp
// Purpose: PeakRDL Register Interface to Command/Response Protocol Adapter
// Module: peakrdl_to_cmdrsp.sv

digraph peakrdl_adapter {
    rankdir=LR;
    newrank=true;
    splines=ortho;
    nodesep=0.8;
    ranksep=1.2;

    // Graph attributes
    graph [fontname="Arial", fontsize=10, label="peakrdl_to_cmdrsp - PeakRDL to Command/Response Adapter\nDecouples register interface from implementation", labelloc=t];
    node [fontname="Arial", fontsize=9, shape=box, style=filled];
    edge [fontname="Arial", fontsize=8];

    // PeakRDL Register Interface (APB-style)
    subgraph cluster_peakrdl {
        label="PeakRDL Register Interface (APB-style)";
        style=filled;
        fillcolor=lightblue;

        reg_if [shape=record, fillcolor=lightblue, label="{Register Interface|reg_addr[15:0]\|reg_wdata[31:0]\|reg_write\|reg_read\|reg_rdata[31:0]\|reg_error}"];
    }

    // Adapter Logic
    subgraph cluster_adapter {
        label="Adapter Logic";
        style=filled;
        fillcolor=lightyellow;

        cmd_gen [shape=box, fillcolor=white, label="Command Generator"];
        rsp_handler [shape=box, fillcolor=white, label="Response Handler"];
        wr_flag [shape=box, fillcolor=white, label="Write Flag\n(reg_write)"];
        rd_flag [shape=box, fillcolor=white, label="Read Flag\n(reg_read)"];

        cmd_gen -> wr_flag [style=dashed];
        cmd_gen -> rd_flag [style=dashed];
        rsp_handler -> cmd_gen [style=dashed, label="handshake"];
    }

    // Command/Response Interface
    subgraph cluster_cmdrsp {
        label="Command/Response Interface (Custom Protocol)";
        style=filled;
        fillcolor=lightcoral;

        cmd_if [shape=record, fillcolor=lightcoral, label="{Command Interface|cmd_valid\|cmd_ready\|cmd_addr[15:0]\|cmd_data[31:0]\|cmd_write}"];
        rsp_if [shape=record, fillcolor=lightcoral, label="{Response Interface|rsp_valid\|rsp_ready\|rsp_data[31:0]\|rsp_error}"];
    }

    // Data flow
    reg_if -> cmd_gen [label="register\noperation"];
    cmd_gen -> cmd_if [label="command\nhandshake"];
    rsp_if -> rsp_handler [label="response\nhandshake"];
    rsp_handler -> reg_if [label="register\nresponse"];

    // Write transaction example
    wr_example [shape=note, fillcolor=lightcyan, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="lightblue"><B>Write Transaction</B></TD></TR>
<TR><TD ALIGN="LEFT">Cycle 1:</TD><TD ALIGN="LEFT">reg_write=1, reg_addr=0x100</TD></TR>
<TR><TD ALIGN="LEFT">→</TD><TD ALIGN="LEFT">reg_wdata=0xDEAD</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 2:</TD><TD ALIGN="LEFT">cmd_valid=1, cmd_write=1</TD></TR>
<TR><TD ALIGN="LEFT">→</TD><TD ALIGN="LEFT">cmd_addr=0x100, cmd_data=0xDEAD</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 3:</TD><TD ALIGN="LEFT">cmd_ready=1 (accepted)</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 4:</TD><TD ALIGN="LEFT">rsp_valid=1, rsp_error=0</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 5:</TD><TD ALIGN="LEFT">reg_error=0 (complete)</TD></TR>
</TABLE>>];

    // Read transaction example
    rd_example [shape=note, fillcolor=lightgreen, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="lightgreen"><B>Read Transaction</B></TD></TR>
<TR><TD ALIGN="LEFT">Cycle 1:</TD><TD ALIGN="LEFT">reg_read=1, reg_addr=0x200</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 2:</TD><TD ALIGN="LEFT">cmd_valid=1, cmd_write=0</TD></TR>
<TR><TD ALIGN="LEFT">→</TD><TD ALIGN="LEFT">cmd_addr=0x200</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 3:</TD><TD ALIGN="LEFT">cmd_ready=1 (accepted)</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 4:</TD><TD ALIGN="LEFT">rsp_valid=1, rsp_data=0xBEEF</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 5:</TD><TD ALIGN="LEFT">reg_rdata=0xBEEF (complete)</TD></TR>
</TABLE>>];

    // Key features
    features [shape=note, fillcolor=lightyellow, label=<
<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0" CELLPADDING="2">
<TR><TD ALIGN="LEFT"><B>Key Features:</B></TD></TR>
<TR><TD ALIGN="LEFT">✓ Protocol decoupling</TD></TR>
<TR><TD ALIGN="LEFT">✓ Single-cycle command issue</TD></TR>
<TR><TD ALIGN="LEFT">✓ Pipelined response</TD></TR>
<TR><TD ALIGN="LEFT">✓ Error propagation</TD></TR>
<TR><TD ALIGN="LEFT">✓ Configurable widths</TD></TR>
<TR><TD ALIGN="LEFT">✓ Read/write support</TD></TR>
</TABLE>>];

    // Use cases
    usecases [shape=note, fillcolor=lightgray, label=<
<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0" CELLPADDING="2">
<TR><TD ALIGN="LEFT"><B>Use Cases:</B></TD></TR>
<TR><TD ALIGN="LEFT">• PeakRDL register blocks</TD></TR>
<TR><TD ALIGN="LEFT">• Custom control logic</TD></TR>
<TR><TD ALIGN="LEFT">• Register → command protocol</TD></TR>
<TR><TD ALIGN="LEFT">• Interface decoupling</TD></TR>
<TR><TD ALIGN="LEFT">• Testbench stimulus</TD></TR>
</TABLE>>];

    // Parameters
    params [shape=note, fillcolor=lightcyan, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="lightcyan"><B>Parameters</B></TD></TR>
<TR><TD ALIGN="LEFT">ADDR_WIDTH</TD><TD ALIGN="RIGHT">16</TD></TR>
<TR><TD ALIGN="LEFT">DATA_WIDTH</TD><TD ALIGN="RIGHT">32</TD></TR>
<TR><TD COLSPAN="2" ALIGN="LEFT">Configurable to match\nregister interface</TD></TR>
</TABLE>>];
}
