// Graphviz Block Diagram: axi4_to_apb_convert
// Purpose: AXI4-to-APB Protocol Converter
// Module: axi4_to_apb_convert.sv

digraph axi4_to_apb {
    rankdir=TB;
    newrank=true;
    splines=ortho;
    nodesep=0.6;
    ranksep=0.8;

    // Graph attributes
    graph [fontname="Arial", fontsize=10, label="axi4_to_apb_convert - AXI4-to-APB Protocol Converter\nFull Protocol Translation + Width Adaptation", labelloc=t];
    node [fontname="Arial", fontsize=9, shape=box, style=filled];
    edge [fontname="Arial", fontsize=8];

    // AXI4 Slave Interface
    subgraph cluster_axi4 {
        label="AXI4 Slave Interface (64-bit addr, 32-bit data)";
        style=filled;
        fillcolor=lightblue;
        rank=source;

        axi_aw [shape=record, fillcolor=lightblue, label="{AW Channel|awaddr[63:0]\|awvalid\|awready}"];
        axi_w [shape=record, fillcolor=lightblue, label="{W Channel|wdata[31:0]\|wstrb[3:0]\|wvalid\|wready}"];
        axi_b [shape=record, fillcolor=lightblue, label="{B Channel|bresp\|bvalid\|bready}"];
        axi_ar [shape=record, fillcolor=lightblue, label="{AR Channel|araddr[63:0]\|arvalid\|arready}"];
        axi_r [shape=record, fillcolor=lightblue, label="{R Channel|rdata[31:0]\|rresp\|rvalid\|rready}"];
    }

    // Protocol Conversion FSM
    subgraph cluster_fsm {
        label="Protocol Conversion State Machine";
        style=filled;
        fillcolor=lightyellow;

        fsm [shape=record, fillcolor=white, label="{State Machine|{IDLE|WRITE_SETUP|WRITE_ACCESS|WRITE_RESP|READ_SETUP|READ_ACCESS|READ_RESP}}"];

        wr_path [shape=box, fillcolor=lightgreen, label="Write Path\nAW + W → APB Write"];
        rd_path [shape=box, fillcolor=lightcyan, label="Read Path\nAR → APB Read"];

        addr_convert [shape=box, fillcolor=white, label="Address Converter\n64-bit → 32-bit\n(truncate upper bits)"];

        resp_convert [shape=box, fillcolor=white, label="Response Converter\nPSLVERR → BRESP/RRESP"];
    }

    // APB Master Interface
    subgraph cluster_apb {
        label="APB Master Interface (32-bit addr, 32-bit data)";
        style=filled;
        fillcolor=lightcoral;
        rank=sink;

        apb_signals [shape=record, fillcolor=lightcoral, label="{APB Signals|paddr[31:0]\|psel\|penable\|pwrite\|pwdata[31:0]\|pstrb[3:0]\|pprot\|prdata[31:0]\|pready\|pslverr}"];
    }

    // Write flow
    axi_aw -> fsm [label="write req", color=blue];
    axi_w -> fsm [label="write data", color=blue];
    fsm -> wr_path [label="wr state", color=blue];
    wr_path -> addr_convert [label="addr", color=blue];
    addr_convert -> apb_signals [label="paddr\npsel\npenable\npwrite\npwdata\npstrb", color=blue];
    apb_signals -> resp_convert [label="pready\npslverr", color=blue];
    resp_convert -> axi_b [label="bresp\nbvalid", color=blue];

    // Read flow
    axi_ar -> fsm [label="read req", color=green];
    fsm -> rd_path [label="rd state", color=green];
    rd_path -> addr_convert [label="addr", color=green];
    addr_convert -> apb_signals [label="paddr\npsel\npenable\n!pwrite", color=green];
    apb_signals -> resp_convert [label="prdata\npready\npslverr", color=green];
    resp_convert -> axi_r [label="rdata\nrresp\nrvalid", color=green];

    // FSM State Transitions
    fsm_diagram [shape=note, fillcolor=lightyellow, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="lightyellow"><B>FSM States</B></TD></TR>
<TR><TD ALIGN="LEFT">IDLE</TD><TD ALIGN="LEFT">Wait for AW/AR</TD></TR>
<TR><TD ALIGN="LEFT">WRITE_SETUP</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=0</TD></TR>
<TR><TD ALIGN="LEFT">WRITE_ACCESS</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=1</TD></TR>
<TR><TD ALIGN="LEFT">WRITE_RESP</TD><TD ALIGN="LEFT">Return B response</TD></TR>
<TR><TD ALIGN="LEFT">READ_SETUP</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=0</TD></TR>
<TR><TD ALIGN="LEFT">READ_ACCESS</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=1</TD></TR>
<TR><TD ALIGN="LEFT">READ_RESP</TD><TD ALIGN="LEFT">Return R response</TD></TR>
</TABLE>>];

    // Example timing
    example [shape=note, fillcolor=lightcyan, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="lightblue"><B>Example Write Transaction</B></TD></TR>
<TR><TD ALIGN="LEFT">Cycle 1:</TD><TD ALIGN="LEFT">AWVALID=1, WVALID=1</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 2:</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=0</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 3:</TD><TD ALIGN="LEFT">PSEL=1, PENABLE=1</TD></TR>
<TR><TD ALIGN="LEFT">Cycle 4:</TD><TD ALIGN="LEFT">PREADY=1, BVALID=1</TD></TR>
</TABLE>>];

    // Key features
    features [shape=note, fillcolor=lightgreen, label=<
<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0" CELLPADDING="2">
<TR><TD ALIGN="LEFT"><B>Key Features:</B></TD></TR>
<TR><TD ALIGN="LEFT">✓ Full AXI4 → APB protocol</TD></TR>
<TR><TD ALIGN="LEFT">✓ Address width conversion</TD></TR>
<TR><TD ALIGN="LEFT">✓ Data width adaptation</TD></TR>
<TR><TD ALIGN="LEFT">✓ Error response mapping</TD></TR>
<TR><TD ALIGN="LEFT">✓ PSTRB support</TD></TR>
<TR><TD ALIGN="LEFT">✓ PPROT support</TD></TR>
</TABLE>>];

    // Response mapping
    resp_map [shape=note, fillcolor=orange, label=<
<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
<TR><TD COLSPAN="2" BGCOLOR="orange"><B>Response Mapping</B></TD></TR>
<TR><TD ALIGN="LEFT">APB</TD><TD ALIGN="LEFT">AXI4</TD></TR>
<TR><TD ALIGN="LEFT">PSLVERR=0</TD><TD ALIGN="LEFT">OKAY (2'b00)</TD></TR>
<TR><TD ALIGN="LEFT">PSLVERR=1</TD><TD ALIGN="LEFT">SLVERR (2'b10)</TD></TR>
</TABLE>>];

    // Use cases
    usecases [shape=note, fillcolor=lightgray, label=<
<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0" CELLPADDING="2">
<TR><TD ALIGN="LEFT"><B>Use Cases:</B></TD></TR>
<TR><TD ALIGN="LEFT">• CPU to APB peripherals</TD></TR>
<TR><TD ALIGN="LEFT">• AXI4 bus to APB bridge</TD></TR>
<TR><TD ALIGN="LEFT">• Mixed protocol systems</TD></TR>
<TR><TD ALIGN="LEFT">• Legacy peripheral integration</TD></TR>
</TABLE>>];
}
