`timescale 1ns / 1ps

module ecc_hamming_decode_032 #(parameter int  N = 32,
parameter int  ECC = 6)(
    input  logic [N-1:0]   i_data,
    input  logic [ECC-1:0] i_ecc,
    output logic [N-1:0]   o_data,
    output logic           o_error,
    output logic           o_repairable
);

// Generated by the Hamming Class; do not modify the code
// Syndrome
logic [EDC-1:0] w_syndrome;
assign w_syndrome[0] = i_ecc[5] ^ i_data[31] ^ i_data[30] ^ i_data[28] ^ i_data[27] ^ i_data[25] ^ i_data[23] ^ i_data[21] ^ i_data[20] ^ i_data[18] ^ i_data[16] ^ i_data[14] ^ i_data[12] ^ i_data[10] ^ i_data[8] ^ i_data[6] ^ i_data[5] ^ i_data[3] ^ i_data[1];
assign w_syndrome[1] = i_ecc[4] ^ i_data[31] ^ i_data[29] ^ i_data[28] ^ i_data[26] ^ i_data[25] ^ i_data[22] ^ i_data[21] ^ i_data[19] ^ i_data[18] ^ i_data[15] ^ i_data[14] ^ i_data[11] ^ i_data[10] ^ i_data[7] ^ i_data[6] ^ i_data[4] ^ i_data[3] ^ i_data[0];
assign w_syndrome[2] = i_ecc[3] ^ i_data[30] ^ i_data[29] ^ i_data[28] ^ i_data[24] ^ i_data[23] ^ i_data[22] ^ i_data[21] ^ i_data[17] ^ i_data[16] ^ i_data[15] ^ i_data[14] ^ i_data[9] ^ i_data[8] ^ i_data[7] ^ i_data[6] ^ i_data[2] ^ i_data[1] ^ i_data[0];
assign w_syndrome[3] = i_ecc[2] ^ i_data[27] ^ i_data[26] ^ i_data[25] ^ i_data[24] ^ i_data[23] ^ i_data[22] ^ i_data[21] ^ i_data[13] ^ i_data[12] ^ i_data[11] ^ i_data[10] ^ i_data[9] ^ i_data[8] ^ i_data[7] ^ i_data[6];
assign w_syndrome[4] = i_ecc[1] ^ i_data[20] ^ i_data[19] ^ i_data[18] ^ i_data[17] ^ i_data[16] ^ i_data[15] ^ i_data[14] ^ i_data[13] ^ i_data[12] ^ i_data[11] ^ i_data[10] ^ i_data[9] ^ i_data[8] ^ i_data[7] ^ i_data[6];
assign w_syndrome[5] = i_ecc[0] ^ i_data[5] ^ i_data[4] ^ i_data[3] ^ i_data[2] ^ i_data[1] ^ i_data[0];

// Data Repair
always_comb begin
    o_data =  i_data;
    o_error =  1'b1;
    o_repairable =  1'b0;
    case (w_syndrome)
        6'b000000: o_error = 1'b0;
        6'b000001: begin
            o_repairable = 1'b0;
        end
        6'b000010: begin
            o_repairable = 1'b0;
        end
        6'b000100: begin
            o_repairable = 1'b0;
        end
        6'b001000: begin
            o_repairable = 1'b0;
        end
        6'b010000: begin
            o_repairable = 1'b0;
        end
        6'b100000: begin
            o_repairable = 1'b0;
        end
        6'b000011: begin
            o_data[31] = ~i_data[31];
            o_repairable = 1'b1;
        end
        6'b000101: begin
            o_data[30] = ~i_data[30];
            o_repairable = 1'b1;
        end
        6'b000110: begin
            o_data[29] = ~i_data[29];
            o_repairable = 1'b1;
        end
        6'b000111: begin
            o_data[28] = ~i_data[28];
            o_repairable = 1'b1;
        end
        6'b001001: begin
            o_data[27] = ~i_data[27];
            o_repairable = 1'b1;
        end
        6'b001010: begin
            o_data[26] = ~i_data[26];
            o_repairable = 1'b1;
        end
        6'b001011: begin
            o_data[25] = ~i_data[25];
            o_repairable = 1'b1;
        end
        6'b001100: begin
            o_data[24] = ~i_data[24];
            o_repairable = 1'b1;
        end
        6'b001101: begin
            o_data[23] = ~i_data[23];
            o_repairable = 1'b1;
        end
        6'b001110: begin
            o_data[22] = ~i_data[22];
            o_repairable = 1'b1;
        end
        6'b001111: begin
            o_data[21] = ~i_data[21];
            o_repairable = 1'b1;
        end
        6'b010001: begin
            o_data[20] = ~i_data[20];
            o_repairable = 1'b1;
        end
        6'b010010: begin
            o_data[19] = ~i_data[19];
            o_repairable = 1'b1;
        end
        6'b010011: begin
            o_data[18] = ~i_data[18];
            o_repairable = 1'b1;
        end
        6'b010100: begin
            o_data[17] = ~i_data[17];
            o_repairable = 1'b1;
        end
        6'b010101: begin
            o_data[16] = ~i_data[16];
            o_repairable = 1'b1;
        end
        6'b010110: begin
            o_data[15] = ~i_data[15];
            o_repairable = 1'b1;
        end
        6'b010111: begin
            o_data[14] = ~i_data[14];
            o_repairable = 1'b1;
        end
        6'b011000: begin
            o_data[13] = ~i_data[13];
            o_repairable = 1'b1;
        end
        6'b011001: begin
            o_data[12] = ~i_data[12];
            o_repairable = 1'b1;
        end
        6'b011010: begin
            o_data[11] = ~i_data[11];
            o_repairable = 1'b1;
        end
        6'b011011: begin
            o_data[10] = ~i_data[10];
            o_repairable = 1'b1;
        end
        6'b011100: begin
            o_data[9] = ~i_data[9];
            o_repairable = 1'b1;
        end
        6'b011101: begin
            o_data[8] = ~i_data[8];
            o_repairable = 1'b1;
        end
        6'b011110: begin
            o_data[7] = ~i_data[7];
            o_repairable = 1'b1;
        end
        6'b011111: begin
            o_data[6] = ~i_data[6];
            o_repairable = 1'b1;
        end
        6'b100001: begin
            o_data[5] = ~i_data[5];
            o_repairable = 1'b1;
        end
        6'b100010: begin
            o_data[4] = ~i_data[4];
            o_repairable = 1'b1;
        end
        6'b100011: begin
            o_data[3] = ~i_data[3];
            o_repairable = 1'b1;
        end
        6'b100100: begin
            o_data[2] = ~i_data[2];
            o_repairable = 1'b1;
        end
        6'b100101: begin
            o_data[1] = ~i_data[1];
            o_repairable = 1'b1;
        end
        6'b100110: begin
            o_data[0] = ~i_data[0];
            o_repairable = 1'b1;
        end
        default: o_repairable = 1'b0;
    endcase // w_syndrome
end // always_comb

// synopsys translate_off
initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0, ecc_hamming_decode_032);
end
// synopsys translate_on

endmodule
